package data_access_layer;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
// Imports the necessary methods to make the code to actually work.

public class DAL {

	Statement stmt;
	private static Connection con;

	public DAL() {
		try {
			
			// Makes a connection with the database.
			
			Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
			String connectionUrl = "jdbc:sqlserver://JONAS\\MSSQLSERVER;"
					+ "database=Demo Database NAV (5-0);" + "user=User2;"
					+ "password=SYSB13OLLE_";

			con = DriverManager.getConnection(connectionUrl);

		} catch (Exception e) {
			e.printStackTrace();
			System.out.println(e.getMessage());
			System.exit(0);
		}
	}

	/*-------------------------------- SQL and ResultSets for data-------------------------------------*/

	// Each of these SQL and ResultSets brings the information from the database to the java GUI. 
	
	public ResultSet findEmployeeData() throws SQLException {
		stmt = con.createStatement();
		String sqlStr = "select [No_], [First Name], [Last Name], [Initials], [Job Title] from [CRONUS Sverige AB$Employee];";
		ResultSet rset = stmt.executeQuery(sqlStr);
		return rset;
	}

	public ResultSet findEmployeeAbsenceData() throws SQLException {
		stmt = con.createStatement();
		String sqlStr = "select [Employee No_], [From Date], [To Date],[Cause of Absence Code], [Description] from [CRONUS Sverige AB$Employee Absence];";
		ResultSet rset = stmt.executeQuery(sqlStr);
		return rset;
	}

	public ResultSet findEmployeePortalSetup() throws SQLException {
		stmt = con.createStatement();
		String sqlStr = "select [Config TP Initial Req_ Caption], [Config TP WP Request Caption] ,[Search Tool Pane Caption], [Search Config Table Caption], [Search TP All Tables Caption] from [CRONUS Sverige AB$Employee Portal Setup];";
		ResultSet rset = stmt.executeQuery(sqlStr);
		return rset;
	}

	public ResultSet findEmployeeQualification() throws SQLException {
		stmt = con.createStatement();
		String sqlStr = "select [Employee No_], [Line No_], [Qualification Code], [Description], [Institution_Company] from [CRONUS Sverige AB$Employee Qualification];";
		ResultSet rset = stmt.executeQuery(sqlStr);
		return rset;
	}

	public ResultSet findEmployeeRelative() throws SQLException {
		stmt = con.createStatement();
		String sqlStr = "select [Employee No_], [Relative Code], [First Name], [Last Name], [Birth Date] from [CRONUS Sverige AB$Employee Relative];";
		ResultSet rset = stmt.executeQuery(sqlStr);
		return rset;
	}

	/*-------------------------------- SQL and Resultsets for Metadata-------------------------------------*/

	public ResultSet findEmployeeMetadata() throws SQLException {
		stmt = con.createStatement();
		String sqlStr = "select TABLE_NAME, DATA_TYPE, CHARACTER_MAXIMUM_LENGTH, NUMERIC_PRECISION, COLLATION_NAME from INFORMATION_SCHEMA.COLUMNS where TABLE_NAME ='CRONUS Sverige AB$Employee';";
		ResultSet rset = stmt.executeQuery(sqlStr);
		return rset;
	}

	public ResultSet findEmployeeAbsenceMetadata() throws SQLException {
		stmt = con.createStatement();
		String sqlStr = "select TABLE_NAME, DATA_TYPE, CHARACTER_MAXIMUM_LENGTH, NUMERIC_PRECISION, COLLATION_NAME from INFORMATION_SCHEMA.COLUMNS where TABLE_NAME ='CRONUS Sverige AB$Employee Absence';";
		ResultSet rset = stmt.executeQuery(sqlStr);
		return rset;
	}

	public ResultSet findEmployeePortalSetupMetadata() throws SQLException {
		stmt = con.createStatement();
		String sqlStr = "select TABLE_NAME, DATA_TYPE, CHARACTER_MAXIMUM_LENGTH, NUMERIC_PRECISION, COLLATION_NAME from INFORMATION_SCHEMA.COLUMNS where TABLE_NAME ='CRONUS Sverige AB$Employee Portal Setup';";
		ResultSet rset = stmt.executeQuery(sqlStr);
		return rset;
	}

	public ResultSet findEmployeeQualificationMetadata() throws SQLException {
		stmt = con.createStatement();
		String sqlStr = "select TABLE_NAME, DATA_TYPE, CHARACTER_MAXIMUM_LENGTH, NUMERIC_PRECISION, COLLATION_NAME from INFORMATION_SCHEMA.COLUMNS where TABLE_NAME ='CRONUS Sverige AB$Employee Qualification';";
		ResultSet rset = stmt.executeQuery(sqlStr);
		return rset;
	}

	public ResultSet findEmployeeRelativeMetadata() throws SQLException {
		stmt = con.createStatement();
		String sqlStr = "select TABLE_NAME, DATA_TYPE, CHARACTER_MAXIMUM_LENGTH, NUMERIC_PRECISION, COLLATION_NAME from INFORMATION_SCHEMA.COLUMNS where TABLE_NAME ='CRONUS Sverige AB$Employee Relative';";
		ResultSet rset = stmt.executeQuery(sqlStr);
		return rset;
	}
}
