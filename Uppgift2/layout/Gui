package layout;

import java.awt.BorderLayout;
import java.awt.EventQueue;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLException;
import java.util.Vector;

import javax.swing.JFrame;
import javax.swing.JPanel;
import javax.swing.border.EmptyBorder;
import javax.swing.table.DefaultTableModel;
import javax.swing.JComboBox;
import javax.swing.JTextPane;
import javax.swing.JTable;
import javax.swing.JSpinner;
import javax.swing.JList;
import javax.swing.JButton;
import javax.swing.JRadioButton;
import javax.swing.JTextField;
import javax.swing.JLabel;

import data_access_layer.DAL;
import controller.Controller;
import java.awt.event.ActionListener;
import java.awt.event.ActionEvent;

public class Gui extends JFrame {

	private Controller con = new Controller(); // imports necessary methods from different classes
	private JPanel contentPane;
	private JTable table;
	private JTable showEmployeeData;

	/*----------------------------------------------------- Launches the application ---------------------------------------------------------*/
	public static void main(String[] args) {
		EventQueue.invokeLater(new Runnable() {
			public void run() {
				try {
					DAL dal = new DAL();
					dal.findEmployeeData("");
					Gui frame = new Gui();
					frame.setVisible(true);
				} catch (Exception e) {
					e.printStackTrace();
				}
			}
		});
	}

		/*------------------------------------------------------ Creates the frame --------------------------------------------------------------*/

	public Gui() {

		final DAL dal = new DAL();

		setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		setBounds(100, 100, 850, 760);
		contentPane = new JPanel();
		contentPane.setBorder(new EmptyBorder(5, 5, 5, 5));
		setContentPane(contentPane);
		contentPane.setLayout(null);
		
		/*-----------------------------------------------------Creates the JTable -----------------------------------------------------------*/
		
		table = new JTable();
		table.setBounds(64, 173, 698, 500);
		contentPane.add(table);
	
		table.setBounds(64, 173, 698, 500);
		contentPane.add(table);
	
		/*-----------------------------------------------------Creates the JComboBox -----------------------------------------------------------*/
		
		String[] comboBoxSelection = new String[] {
			"Choose table",
			"Employee - Data",
			"Employee - Metadata",
		};
		JComboBox comboBoxUppgift2 = new JComboBox(comboBoxSelection);
		comboBoxUppgift2.setBounds(304, 85, 229, 30);
		contentPane.add(comboBoxUppgift2);

		/* ---------------------------------------------------Creates the JLabel -----------------------------------------------------------------*/

		JLabel lblChooseTabel = new JLabel("List of tables");
		lblChooseTabel.setBounds(380, 23, 260, 60);
		contentPane.add(lblChooseTabel);	
		
		/* ---------------------------------------------------Creates the JButtons -----------------------------------------------------------------*/
		
		JButton btnshowAllEmpoyeeData = new JButton("Show all employee data");
		btnshowAllEmpoyeeData.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent arg0) {
				showEmployeeData();
			}
		});
		btnshowAllEmpoyeeData.setBounds(64, 86, 115, 29);
		contentPane.add(btnshowAllEmpoyeeData);
	}
	
	/*------------------------------------------------------ Creates the methods----------------------------------------------------------------*/
	
	/*--- Creates the table ---*/
	private void buildTable(ResultSet rs, JTable table) {
		try {
			DefaultTableModel dt = buildTableModel(rs);
			table.setModel(dt);;
		} catch (SQLException e1) {
			// TODO Auto-generated catch block
			e1.printStackTrace();
		}
	}

	/*--- Gets the data into the table correct ---*/
	public static DefaultTableModel buildTableModel(ResultSet rs)
			throws SQLException {

		ResultSetMetaData metaData = rs.getMetaData();

		// Names of columns
		Vector<String> columnNames = new Vector<String>();
		int columnCount = metaData.getColumnCount();
		for (int column = 1; column <= columnCount; column++) {
			columnNames.add(metaData.getColumnName(column));
		}

		// Data of the table
		Vector<Vector<Object>> data = new Vector<Vector<Object>>();
		while (rs.next()) {
			Vector<Object> vector = new Vector<Object>();
			for (int columnIndex = 1; columnIndex <= columnCount; columnIndex++) {
				vector.add(rs.getObject(columnIndex));
			}
			data.add(vector);
		}

		return new DefaultTableModel(data, columnNames);

	}
	/*--- Creates the method for the show all employee data button ---*/
	private void showEmployeeData(){
		ResultSet rs = null;
		try {
			rs = con.findEmployeeData();
		} catch (SQLException e1) {
			// TODO Auto-generated catch block
			e1.printStackTrace();
		}
		buildTable(rs, table);
	}
}
