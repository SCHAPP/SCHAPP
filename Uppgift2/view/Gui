package view;

import java.awt.BorderLayout;
import java.awt.EventQueue;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLException;

import java.util.Vector;

import javax.swing.JFrame;
import javax.swing.JPanel;
import javax.swing.border.EmptyBorder;
import javax.swing.table.DefaultTableModel;
import javax.swing.JTable;
import javax.swing.JButton;
import javax.swing.JLabel;
import javax.swing.JScrollPane;


import data_access_layer.DAL;
import controller.Controller;
import java.awt.event.ActionListener;
import java.awt.event.ActionEvent;
import javax.swing.JTabbedPane;

//Imports the necessary methods to make the code to actually work.

public class Gui extends JFrame {

	private Controller con = new Controller(); // Makes the Gui class able to get information from the Controller class.
												
	private JPanel contentPane;  // Creates variable of the JPanel and the JTable.
	private JTable table;
	private JTable tableProject2;
	

	/*----------------------------------------------------- Launches the application ---------------------------------------------------------*/
	public static void main(String[] args) {
		EventQueue.invokeLater(new Runnable() {
			public void run() {
				try {
					DAL dal = new DAL();
					dal.findEmployeeData();
					Gui frame = new Gui();
					frame.setVisible(true);
				} catch (Exception e) {
					e.printStackTrace();
				}
			}
		});
	}

	/*------------------------------------------------------ Creates the frame --------------------------------------------------------------*/

	public Gui() {

		
		setTitle ("Project 2");
		setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		setBounds(100, 100, 1000, 800);
		contentPane = new JPanel();	
		contentPane.setBorder(new EmptyBorder(5, 5, 5, 5));
		setContentPane(contentPane);
		contentPane.setLayout(null);
		

		JPanel project1 = new JPanel();
		project1.setLayout(null);
		JPanel project2 = new JPanel();
		
		
	
		/*-----------------------------------------------Creates the JTable, JScrollPane and JTabbedPane ------------------------------------------*/

		// Creates the JTable and JScrollPane to be able to watch and scroll through different information in the database for boths projects.
		
		JScrollPane scrollPane = new JScrollPane();
		scrollPane.setBounds(42, 251, 884, 443);
		project1.add(scrollPane);
		table = new JTable();
		scrollPane.setViewportView(table);
		
		JScrollPane scrollPaneProject2 = new JScrollPane();
		scrollPaneProject2.setBounds(42, 251, 884, 443);
		project2.add(scrollPaneProject2);
		tableProject2 = new JTable();
		scrollPaneProject2.setViewportView(tableProject2);
		
		JTabbedPane tabbedPane = new JTabbedPane(JTabbedPane.TOP);
		tabbedPane.setBounds(0, 0, 978, 744);
		contentPane.add(tabbedPane);
		
		tabbedPane.addTab("Project 1", null, project1, null);
		tabbedPane.addTab("Project 2", null, project2, null);
		project2.setLayout(null);
		
		/* ---------------------------------------------------Creates the JLabel -----------------------------------------------------------------*/
		

		// Creates the JLabel with information in the frame.
		
		JLabel lblChooseTabel = new JLabel("Choose which data to show below");
		lblChooseTabel.setBounds(346, 120, 241, 20);
		project1.add(lblChooseTabel);
		
		JLabel lblChooseTabel2 = new JLabel("Choose which data to show below");
		lblChooseTabel2.setBounds(386, 113, 241, 20);
		project2.add(lblChooseTabel2);

		/* ---------------------------------------------------Creates the JButtons -----------------------------------------------------------------*/
		
		// Creates the JButtons for the data buttons.
		
		JButton btnShowEmployeeAbsenceMetadataData = new JButton("Show employee absence data ");
		btnShowEmployeeAbsenceMetadataData.setBounds(42, 161, 245, 29);
		project1.add(btnShowEmployeeAbsenceMetadataData);
		
		JButton btnShowAllEmployeeData = new JButton("Show employee data");
		btnShowAllEmployeeData.setBounds(42, 28, 245, 29);
		project1.add(btnShowAllEmployeeData);

		JButton btnShowEmployeePortalSetup = new JButton("Show portal setup");
		btnShowEmployeePortalSetup.setBounds(42, 206, 245, 29);
		project1.add(btnShowEmployeePortalSetup);

		JButton btnShowEmployeeQualification = new JButton("Show employee qualification");
		btnShowEmployeeQualification.setBounds(42, 116, 245, 29);
		project1.add(btnShowEmployeeQualification);

		JButton btnShowEmployeeRelative = new JButton("Show employee relative");
		btnShowEmployeeRelative.setBounds(42, 73, 245, 29);
		project1.add(btnShowEmployeeRelative);

		// Creates the JButtons for the metadata buttons.

		JButton btnShowEmployeeMetadata = new JButton("Show employee metadata");
		btnShowEmployeeMetadata.setBounds(621, 28, 305, 29);
		project1.add(btnShowEmployeeMetadata);

		JButton btnShowEmployeeAbsenceMetadata = new JButton("Show employee absence metadata");
		btnShowEmployeeAbsenceMetadata.setBounds(621, 161, 305, 29);
		project1.add(btnShowEmployeeAbsenceMetadata);

		JButton btnShowEmployeePortalSetupMetadata = new JButton("Show portal setup metadata");
		btnShowEmployeePortalSetupMetadata.setBounds(621, 206, 305, 29);
		project1.add(btnShowEmployeePortalSetupMetadata);

		JButton btnShowEmployeeQualificationMetadata = new JButton("Show employee qualification metadata");
		btnShowEmployeeQualificationMetadata.setBounds(621, 116, 305, 29);
		project1.add(btnShowEmployeeQualificationMetadata);
		
		JButton btnShowEmployeeRelativeMetadata = new JButton("Show employee relative metadata");
		btnShowEmployeeRelativeMetadata.setBounds(621, 73, 305, 29);
		project1.add(btnShowEmployeeRelativeMetadata);
		
		// Creates the JButtons for the project 2 frame.
		
		JButton btnShowKeys = new JButton("Show all keys");
		btnShowKeys.setBounds(42, 64, 267, 29);
		project2.add(btnShowKeys);
		
		JButton btnShowIndexes = new JButton("Show all indexes");
		btnShowIndexes.setBounds(42, 109, 267, 29);
		project2.add(btnShowIndexes);
		
		JButton btnShowConstraints = new JButton("Show all constraints");
		btnShowConstraints.setBounds(42, 154, 267, 29);
		project2.add(btnShowConstraints);
		
		JButton btnShowTables = new JButton("Show all tables");
		btnShowTables.setBounds(659, 64, 267, 29);
		project2.add(btnShowTables);
		
		JButton btnShowColumnsEmployee = new JButton("Show all Columns for employee");
		btnShowColumnsEmployee.setBounds(659, 109, 267, 29);
		project2.add(btnShowColumnsEmployee);
		
		JButton btnShowTableMostRows = new JButton("Show table with the most rows");
		btnShowTableMostRows.setBounds(659, 154, 267, 29);
		project2.add(btnShowTableMostRows);
		
		
	
	/*------------------------------------------------------ Creates the ActionListeners ----------------------------------------------------------------*/
	
		// Creates the ActionListeners for the data.
		
		btnShowEmployeeAbsenceMetadataData.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent arg0) {
				showEmployeeAbsenceData();				
			}
			
		});
		btnShowAllEmployeeData.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent arg0) {
				showEmployeeData();
			}
		});
		btnShowEmployeePortalSetup.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent arg0) {
				showEmployeePortalSetup();
			}
		});
		btnShowEmployeeQualification.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent arg0) {
				showEmployeeQualification();
			}
		});
		btnShowEmployeeRelative.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent arg0) {
				showEmployeeRelative();
			}

		});
		
		// Creates the ActionListeners for the metadata
		
		btnShowEmployeeMetadata.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				showEmployeeMetadata();	
			}
		});
		btnShowEmployeeAbsenceMetadata.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent arg0) {
				showEmployeeAbsenceMetadata();	
			}
		});
		btnShowEmployeePortalSetupMetadata.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				showEmployeePortalSetupMetadata();
			}
		});
		btnShowEmployeeQualificationMetadata.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				showEmployeeQualificationMetadata();
			}
		});
		btnShowEmployeeRelativeMetadata.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				showEmployeeRelativeMetadata();
			}
		});
		
		// Creates the ActionListeners for project 2
		
		btnShowKeys.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent arg0) {
				showKeys();
			}
		});
		btnShowIndexes.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent arg0) {
				
				showIndexes();
				
			}
		});
		btnShowConstraints.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent arg0) {
				showConstraints();
			}
		});
		btnShowTables.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent arg0) {
				showTables();
			}
		});
		btnShowColumnsEmployee.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent arg0) {
				showColumnsEmployee();
			}
		});
		btnShowTableMostRows.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent arg0) {
				showTableMostRows();
			}
		});
	}

	/*------------------------------------------------------ Creates the methods----------------------------------------------------------------*/

	//Creates the default table
	
	private void buildTable(ResultSet rs, JTable table) {
		try {
			DefaultTableModel dt = buildTableModel(rs);
			table.setModel(dt);
			;
		} catch (SQLException e1) {
			// TODO Auto-generated catch block
			e1.printStackTrace();
		}
	}

	// Gets the data into the table correctly
	
	public static DefaultTableModel buildTableModel(ResultSet rs)
			throws SQLException {

		ResultSetMetaData metaData = rs.getMetaData();

		// Names of columns
		
		Vector<String> columnNames = new Vector<String>();
		int columnCount = metaData.getColumnCount();
		for (int column = 1; column <= columnCount; column++) {
			columnNames.add(metaData.getColumnName(column));
		}

		// Data of the table
		
		Vector<Vector<Object>> data = new Vector<Vector<Object>>();
		while (rs.next()) {
			Vector<Object> vector = new Vector<Object>();
			for (int columnIndex = 1; columnIndex <= columnCount; columnIndex++) {
				vector.add(rs.getObject(columnIndex));
			}
			data.add(vector);
		}

		return new DefaultTableModel(data, columnNames);

	}

	// Creates the methods for all the ActionListeners to be able to get the data/metadata and for project 2 in the JTable.
	// Data
	private void showEmployeeData() {
		ResultSet rs = null;
		try {
			rs = con.findEmployeeData();
		} catch (SQLException e1) {
			// TODO Auto-generated catch block
			e1.printStackTrace();
		}
		buildTable(rs, table);
	}

	private void showEmployeeAbsenceData() {
		ResultSet rs = null;
		try {
			rs = con.findEmployeeAbsenceData();
		} catch (SQLException e1) {
			// TODO Auto-generated catch block
			e1.printStackTrace();
		}
		buildTable(rs, table);
	}

	private void showEmployeePortalSetup() {
		ResultSet rs = null;
		try {
			rs = con.findEmployeePortalSetup();
		} catch (SQLException e1) {
			// TODO Auto-generated catch block
			e1.printStackTrace();
		}
		buildTable(rs, table);
	}

	private void showEmployeeQualification() {
		ResultSet rs = null;
		try {
			rs = con.findEmployeeQualification();
		} catch (SQLException e1) {
			// TODO Auto-generated catch block
			e1.printStackTrace();
		}
		buildTable(rs, table);
	}

	private void showEmployeeRelative() {
		ResultSet rs = null;
		try {
			rs = con.findEmployeeRelative();
		} catch (SQLException e1) {
			// TODO Auto-generated catch block
			e1.printStackTrace();
		}
		buildTable(rs, table);
	}

	//Metadata
	
	private void showEmployeeMetadata() {
		ResultSet rs = null;
		try {
			rs = con.findEmployeeMetadata();
		} catch (SQLException e1) {
			// TODO Auto-generated catch block
			e1.printStackTrace();
		}
		buildTable(rs, table);
	}

	private void showEmployeeAbsenceMetadata() {
		ResultSet rs = null;
		try {
			rs = con.findEmployeeAbsenceMetadata();
		} catch (SQLException e1) {
			// TODO Auto-generated catch block
			e1.printStackTrace();
		}
		buildTable(rs, table);
	}

	private void showEmployeePortalSetupMetadata() {
		ResultSet rs = null;
		try {
			rs = con.findEmployeePortalSetupMetadata();
		} catch (SQLException e1) {
			// TODO Auto-generated catch block
			e1.printStackTrace();
		}
		buildTable(rs, table);
	}

	private void showEmployeeQualificationMetadata() {
		ResultSet rs = null;
		try {
			rs = con.findEmployeeQualificationMetadata();
		} catch (SQLException e1) {
			// TODO Auto-generated catch block
			e1.printStackTrace();
		}
		buildTable(rs, table);
	}

	private void showEmployeeRelativeMetadata() {
		ResultSet rs = null;
		try {
			rs = con.findEmployeeRelativeMetadata();
		} catch (SQLException e1) {
			// TODO Auto-generated catch block
			e1.printStackTrace();
		}
		buildTable(rs, table);
	}
	
	// Project 2
	
	private void showKeys(){
		ResultSet rs = null;
		try{
			rs = con.findKeys();
		} catch (SQLException e1) {
			// TODO Auto-generated catch block
			e1.printStackTrace();
		}
		buildTable(rs, tableProject2);
	}
	private void showIndexes(){
		ResultSet rs = null;
		try{
			rs = con.findIndexes();
		} catch (SQLException e1) {
			// TODO Auto-generated catch block
			e1.printStackTrace();
		}
		buildTable(rs, tableProject2);
	}
	private void showConstraints(){
		ResultSet rs = null;
		try{
			rs = con.findConstraints();
		} catch (SQLException e1) {
			// TODO Auto-generated catch block
			e1.printStackTrace();
		}
		buildTable(rs, tableProject2);
	}
	private void showTables(){
		ResultSet rs = null;
		try{
			rs = con.findTables();
		} catch (SQLException e1) {
			// TODO Auto-generated catch block
			e1.printStackTrace();
		}
		buildTable(rs, tableProject2);
	}
	private void showColumnsEmployee(){
		ResultSet rs = null;
		try{
			rs = con.findColumnsEmployee();
		} catch (SQLException e1) {
			// TODO Auto-generated catch block
			e1.printStackTrace();
		}
		buildTable(rs, tableProject2);
	}
	private void showTableMostRows(){
		ResultSet rs = null;
		try{
			rs = con.findTableMostRows();
		} catch (SQLException e1) {
			// TODO Auto-generated catch block
			e1.printStackTrace();
		}
		buildTable(rs, tableProject2);
	}
}
