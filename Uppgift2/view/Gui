package view;

import java.awt.BorderLayout;
import java.awt.EventQueue;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLException;

import java.util.Vector;

import javax.swing.JFrame;
import javax.swing.JPanel;
import javax.swing.border.EmptyBorder;
import javax.swing.table.DefaultTableModel;
import javax.swing.JTable;
import javax.swing.JButton;
import javax.swing.JLabel;
import javax.swing.JScrollPane;

import data_access_layer.DAL;
import controller.Controller;
import java.awt.event.ActionListener;
import java.awt.event.ActionEvent;
//Imports the necessary methods to make the code to actually work.

public class Gui extends JFrame {

	private Controller con = new Controller(); // Makes the Gui class able to get information from the Controller class.
												
	private JPanel contentPane;  // Creates variable of the JPanel and the JTable.
	private JTable table;

	/*----------------------------------------------------- Launches the application ---------------------------------------------------------*/
	public static void main(String[] args) {
		EventQueue.invokeLater(new Runnable() {
			public void run() {
				try {
					DAL dal = new DAL();
					dal.findEmployeeData();
					Gui frame = new Gui();
					frame.setVisible(true);
				} catch (Exception e) {
					e.printStackTrace();
				}
			}
		});
	}

	/*------------------------------------------------------ Creates the frame --------------------------------------------------------------*/

	public Gui() {

		final DAL dal = new DAL();

		setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		setBounds(100, 100, 1000, 800);
		contentPane = new JPanel();
		contentPane.setBorder(new EmptyBorder(5, 5, 5, 5));
		setContentPane(contentPane);
		contentPane.setLayout(null);

		/*-----------------------------------------------------Creates the JTable and JScrollPane -----------------------------------------------------------*/

		// Creates the JTable and JScrollPane to be able to watch and scroll through different information in the database.
		
		JScrollPane scrollPane = new JScrollPane();
		scrollPane.setBounds(64, 242, 852, 486);
		contentPane.add(scrollPane);
		table = new JTable();
		scrollPane.setViewportView(table);

		/* ---------------------------------------------------Creates the JLabel -----------------------------------------------------------------*/

		// Creates the JLabel with information in the frame.
		
		JLabel lblChooseTabel = new JLabel("Choose which data to show below");
		lblChooseTabel.setBounds(363, 90, 212, 60);
		contentPane.add(lblChooseTabel);

		/* ---------------------------------------------------Creates the JButtons -----------------------------------------------------------------*/

		// Creates the JButtons for the data buttons.

		JButton btnShowAllEmployeeData = new JButton("Show employee data");
		btnShowAllEmployeeData.setBounds(64, 16, 241, 29);
		contentPane.add(btnShowAllEmployeeData);

		JButton btnShowEmployeeAbsenceMetadataData = new JButton("Show employee absence data ");
		btnShowEmployeeAbsenceMetadataData.setBounds(64, 61, 241, 29);
		contentPane.add(btnShowEmployeeAbsenceMetadataData);

		JButton btnShowEmployeePortalSetup = new JButton("Show portal setup");
		btnShowEmployeePortalSetup.setBounds(64, 106, 241, 29);
		contentPane.add(btnShowEmployeePortalSetup);

		JButton btnShowEmployeeQualification = new JButton("Show employee qualification");
		btnShowEmployeeQualification.setBounds(64, 154, 241, 29);
		contentPane.add(btnShowEmployeeQualification);

		JButton btnShowEmployeeRelative = new JButton("Show employee relative");
		btnShowEmployeeRelative.setBounds(64, 199, 241, 29);
		contentPane.add(btnShowEmployeeRelative);

		// Creates the JButtons for the metadata buttons.

		JButton btnShowEmployeeMetadata = new JButton("Show employee metadata");
		btnShowEmployeeMetadata.setBounds(625, 16, 241, 29);
		contentPane.add(btnShowEmployeeMetadata);

		JButton btnShowEmployeeAbsenceMetadata = new JButton("Show employee absence metadata");
		btnShowEmployeeAbsenceMetadata.setBounds(625, 61, 241, 29);
		contentPane.add(btnShowEmployeeAbsenceMetadata);

		JButton btnShowEmployeePortalSetupMetadata = new JButton("Show portal setup metadata");
		btnShowEmployeePortalSetupMetadata.setBounds(625, 106, 241, 29);
		contentPane.add(btnShowEmployeePortalSetupMetadata);

		JButton btnShowEmployeeQualificationMetadata = new JButton("Show employee qualification metadata");
		btnShowEmployeeQualificationMetadata.setBounds(625, 154, 241, 29);
		contentPane.add(btnShowEmployeeQualificationMetadata);

		JButton btnShowEmployeeRelativeMetadata = new JButton("Show employee relative metadata");
		btnShowEmployeeRelativeMetadata.setBounds(625, 199, 241, 29);
		contentPane.add(btnShowEmployeeRelativeMetadata);
	
	/*------------------------------------------------------ Creates the ActionListeners ----------------------------------------------------------------*/
	
		// Creates the ActionListeners for the data.
		
		btnShowAllEmployeeData.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent arg0) {
				showEmployeeData();
			}
		});
		btnShowEmployeeAbsenceMetadataData.addActionListener(new ActionListener() {
		public void actionPerformed(ActionEvent arg0) {
			showEmployeeAbsenceData();
		}
		});
		btnShowEmployeePortalSetup.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent arg0) {
				showEmployeePortalSetup();
			}
		});
		btnShowEmployeeQualification.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent arg0) {
				showEmployeeQualification();
			}
		});
		btnShowEmployeeRelative.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent arg0) {
				showEmployeeRelative();
			}

		});
		
		// Creates the ActionListeners for the metadata
		
		btnShowEmployeeMetadata.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				showEmployeeMetadata();
			}
		});
		btnShowEmployeeAbsenceMetadata.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent arg0) {
				showEmployeeAbsenceMetadata();
			}
		});
		btnShowEmployeePortalSetupMetadata.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				showEmployeePortalSetupMetadata();
			}
		});
		btnShowEmployeeQualificationMetadata.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				showEmployeeQualificationMetadata();
			}
		});
		btnShowEmployeeRelativeMetadata.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				showEmployeeRelativeMetadata();
			}
		});
	}

	/*------------------------------------------------------ Creates the methods----------------------------------------------------------------*/

	//Creates the default table
	
	private void buildTable(ResultSet rs, JTable table) {
		try {
			DefaultTableModel dt = buildTableModel(rs);
			table.setModel(dt);
			;
		} catch (SQLException e1) {
			// TODO Auto-generated catch block
			e1.printStackTrace();
		}
	}

	// Gets the data into the table correctly
	
	public static DefaultTableModel buildTableModel(ResultSet rs)
			throws SQLException {

		ResultSetMetaData metaData = rs.getMetaData();

		// Names of columns
		
		Vector<String> columnNames = new Vector<String>();
		int columnCount = metaData.getColumnCount();
		for (int column = 1; column <= columnCount; column++) {
			columnNames.add(metaData.getColumnName(column));
		}

		// Data of the table
		
		Vector<Vector<Object>> data = new Vector<Vector<Object>>();
		while (rs.next()) {
			Vector<Object> vector = new Vector<Object>();
			for (int columnIndex = 1; columnIndex <= columnCount; columnIndex++) {
				vector.add(rs.getObject(columnIndex));
			}
			data.add(vector);
		}

		return new DefaultTableModel(data, columnNames);

	}

	// Creates the methods for all the ActionListeners to be able to get the data/metadata in the JTable.

	private void showEmployeeData() {
		ResultSet rs = null;
		try {
			rs = con.findEmployeeData();
		} catch (SQLException e1) {
			// TODO Auto-generated catch block
			e1.printStackTrace();
		}
		buildTable(rs, table);
	}

	private void showEmployeeAbsenceData() {
		ResultSet rs = null;
		try {
			rs = con.findEmployeeAbsenceData();
		} catch (SQLException e1) {
			// TODO Auto-generated catch block
			e1.printStackTrace();
		}
		buildTable(rs, table);
	}

	private void showEmployeePortalSetup() {
		ResultSet rs = null;
		try {
			rs = con.findEmployeePortalSetup();
		} catch (SQLException e1) {
			// TODO Auto-generated catch block
			e1.printStackTrace();
		}
		buildTable(rs, table);
	}

	private void showEmployeeQualification() {
		ResultSet rs = null;
		try {
			rs = con.findEmployeeQualification();
		} catch (SQLException e1) {
			// TODO Auto-generated catch block
			e1.printStackTrace();
		}
		buildTable(rs, table);
	}

	private void showEmployeeRelative() {
		ResultSet rs = null;
		try {
			rs = con.findEmployeeRelative();
		} catch (SQLException e1) {
			// TODO Auto-generated catch block
			e1.printStackTrace();
		}
		buildTable(rs, table);
	}

	private void showEmployeeMetadata() {
		ResultSet rs = null;
		try {
			rs = con.findEmployeeMetadata();
		} catch (SQLException e1) {
			// TODO Auto-generated catch block
			e1.printStackTrace();
		}
		buildTable(rs, table);
	}

	private void showEmployeeAbsenceMetadata() {
		ResultSet rs = null;
		try {
			rs = con.findEmployeeAbsenceMetadata();
		} catch (SQLException e1) {
			// TODO Auto-generated catch block
			e1.printStackTrace();
		}
		buildTable(rs, table);
	}

	private void showEmployeePortalSetupMetadata() {
		ResultSet rs = null;
		try {
			rs = con.findEmployeePortalSetupMetadata();
		} catch (SQLException e1) {
			// TODO Auto-generated catch block
			e1.printStackTrace();
		}
		buildTable(rs, table);
	}

	private void showEmployeeQualificationMetadata() {
		ResultSet rs = null;
		try {
			rs = con.findEmployeeQualificationMetadata();
		} catch (SQLException e1) {
			// TODO Auto-generated catch block
			e1.printStackTrace();
		}
		buildTable(rs, table);
	}

	private void showEmployeeRelativeMetadata() {
		ResultSet rs = null;
		try {
			rs = con.findEmployeeRelativeMetadata();
		} catch (SQLException e1) {
			// TODO Auto-generated catch block
			e1.printStackTrace();
		}
		buildTable(rs, table);
	}
}
